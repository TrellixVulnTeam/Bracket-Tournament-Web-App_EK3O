{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nconst POROTOCOL = 'http';\nconst PORT = 3000;\nexport let RestDataSource = /*#__PURE__*/(() => {\n  class RestDataSource {\n    constructor(http, jwtService) {\n      this.http = http;\n      this.jwtService = jwtService;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origion': '*',\n          'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n          'X-Frame-Options': 'Deny',\n          'X-XSS-Protection': '1',\n          'X-Content-Type-Options': 'nosniff',\n          'cache-control': 'max-age=3153600'\n        })\n      };\n      this.user = new User();\n      this.baseUrl = `${POROTOCOL}://${location.hostname}:${PORT}/api/`; //this.baseUrl = 'https://bracket-tournament.herokuapp.com/api/';\n    } // ***************** User Section  ***************************\n\n\n    getUsers() {\n      return this.http.get(this.baseUrl + 'users');\n    }\n\n    signup(user) {\n      return this.http.post(this.baseUrl + 'signup', user);\n    }\n\n    addUser(user) {\n      this.loadToken();\n      return this.http.post(this.baseUrl + 'users/add', user, this.httpOptions);\n    }\n\n    updateUser(user) {\n      this.loadToken();\n      return this.http.post(`${this.baseUrl}users/edit/${user._id}`, user, this.httpOptions);\n    }\n\n    deleteUser(id) {\n      this.loadToken();\n      return this.http.get(`${this.baseUrl}users/delete/${id}`, this.httpOptions);\n    } //*********************End USER SECTION *************************** */\n    // ************************group Section *************************\n\n\n    getgroups() {\n      return this.http.get(this.baseUrl + 'groups');\n    }\n\n    addgroup(group) {\n      this.loadToken();\n      return this.http.post(this.baseUrl + 'groups/add', group, this.httpOptions);\n    }\n\n    updategroup(group) {\n      this.loadToken();\n      return this.http.post(`${this.baseUrl}groups/edit/${group._id}`, group, this.httpOptions);\n    }\n\n    deletegroup(id) {\n      this.loadToken();\n      return this.http.get(`${this.baseUrl}groups/delete/${id}`, this.httpOptions);\n    } //*********************End group SECTION *************************** */\n    // ************************ Authentication Section ******************** */\n\n\n    storeUserData(token, user) {\n      localStorage.setItem('id_token', 'Bearer ' + token);\n      localStorage.setItem('user', JSON.stringify(user));\n      this.authToken = token;\n      this.user = user;\n    }\n\n    authenticate(user) {\n      return this.http.post(this.baseUrl + 'login', user, this.httpOptions);\n    }\n\n    loggedIn() {\n      return !this.jwtService.isTokenExpired(this.authToken);\n    }\n\n    logout() {\n      this.authToken = '';\n      this.user = new User();\n      localStorage.clear();\n      return this.http.get(this.baseUrl + 'logout', this.httpOptions);\n    }\n\n    loadToken() {\n      const token = localStorage.getItem('id_token') || '';\n      this.authToken = token;\n      this.httpOptions.headers = this.httpOptions.headers.set('Authorization', this.authToken);\n    } //*********************End Authentication SECTION *************************** */\n    // ************************tournament Section *************************\n\n\n    gettournaments() {\n      return this.http.get(this.baseUrl + 'tournaments');\n    }\n\n    addtournaments(tournament) {\n      this.loadToken();\n      return this.http.post(this.baseUrl + 'tournaments/add', tournament, this.httpOptions);\n    }\n\n    updatetournaments(tournament) {\n      this.loadToken();\n      return this.http.post(`${this.baseUrl}tournaments/edit/${tournament._id}`, tournament, this.httpOptions);\n    }\n\n    deletetournaments(id) {\n      this.loadToken();\n      return this.http.get(`${this.baseUrl}tournaments/delete/${id}`, this.httpOptions);\n    }\n\n  }\n\n  RestDataSource.ɵfac = function RestDataSource_Factory(t) {\n    return new (t || RestDataSource)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n  };\n\n  RestDataSource.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestDataSource,\n    factory: RestDataSource.ɵfac\n  });\n  return RestDataSource;\n})();","map":null,"metadata":{},"sourceType":"module"}