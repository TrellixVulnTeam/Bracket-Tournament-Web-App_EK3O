{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport let tournamentRepository = /*#__PURE__*/(() => {\n  class tournamentRepository {\n    constructor(dataSource) {\n      this.dataSource = dataSource;\n      this.tournaments = [];\n      this.loaded = false;\n    }\n\n    loadtournaments() {\n      this.loaded = true;\n      this.dataSource.gettournaments().subscribe(tournament => {\n        this.tournaments = tournament;\n      });\n    }\n\n    gettournaments() {\n      if (!this.loaded) {\n        this.loadtournaments();\n      }\n\n      return this.tournaments;\n    }\n\n    getActivetournaments() {\n      if (!this.loaded) {\n        this.loadtournaments();\n      }\n\n      return this.tournaments.filter(x => x.status == true);\n    }\n\n    gettournament(id) {\n      let q = this.tournaments.find(p => p._id === id);\n      console.log(q);\n      return q;\n    }\n\n    savetournament(tournament) {\n      //TODO - Change here after authentication\n      tournament.userCreator = \"Default User\";\n\n      if (tournament._id === null || tournament._id === 0 || tournament._id === undefined) {\n        this.dataSource.addtournaments(tournament).subscribe(u => {\n          this.tournaments.push(tournament);\n        });\n      } else {\n        this.dataSource.updatetournaments(tournament).subscribe(q => {\n          this.tournaments.splice(this.tournaments.findIndex(u => u._id === tournament._id), 1, tournament);\n        });\n      }\n    }\n\n    deletetournament(id) {\n      this.dataSource.deletetournaments(id).subscribe(order => {\n        this.tournaments.splice(this.tournaments.findIndex(o => id === o._id), 1);\n      });\n    }\n\n  }\n\n  tournamentRepository.ɵfac = function tournamentRepository_Factory(t) {\n    return new (t || tournamentRepository)(i0.ɵɵinject(i1.RestDataSource));\n  };\n\n  tournamentRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: tournamentRepository,\n    factory: tournamentRepository.ɵfac\n  });\n  return tournamentRepository;\n})();","map":null,"metadata":{},"sourceType":"module"}