{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest.datasource\";\nexport let groupRepository = /*#__PURE__*/(() => {\n  class groupRepository {\n    constructor(dataSource) {\n      this.dataSource = dataSource;\n      this.groups = [];\n      this.loaded = false;\n    }\n\n    loadgroups() {\n      this.loaded = true;\n      this.dataSource.getgroups().subscribe(group => {\n        this.groups = group;\n      });\n    }\n\n    getgroups() {\n      if (!this.loaded) {\n        this.loadgroups();\n      }\n\n      return this.groups;\n    }\n\n    getActivegroups() {\n      if (!this.loaded) {\n        this.loadgroups();\n      }\n\n      return this.groups.filter(x => x.status == true);\n    }\n\n    getgroup(id) {\n      let q = this.groups.find(p => p._id === id);\n      console.log(q);\n      return q;\n    }\n\n    savegroup(group) {\n      //TODO - Change here after authentication\n      group.userCreator = \"Default User\";\n\n      if (group._id === null || group._id === 0 || group._id === undefined) {\n        this.dataSource.addgroup(group).subscribe(u => {\n          this.groups.push(group);\n        });\n      } else {\n        this.dataSource.updategroup(group).subscribe(q => {\n          this.groups.splice(this.groups.findIndex(u => u._id === group._id), 1, group);\n        });\n      }\n    }\n\n    deletegroup(id) {\n      this.dataSource.deletegroup(id).subscribe(order => {\n        this.groups.splice(this.groups.findIndex(o => id === o._id), 1);\n      });\n    }\n\n  }\n\n  groupRepository.ɵfac = function groupRepository_Factory(t) {\n    return new (t || groupRepository)(i0.ɵɵinject(i1.RestDataSource));\n  };\n\n  groupRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: groupRepository,\n    factory: groupRepository.ɵfac\n  });\n  return groupRepository;\n})();","map":null,"metadata":{},"sourceType":"module"}